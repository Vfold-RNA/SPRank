#!/usr/bin/env python3
import os
import argparse
import numpy as np

parser = argparse.ArgumentParser(description='check_atom_order command-line arguments')
parser.add_argument('-c', '--compound', type=str,  required=True, help='path to the amber prepared compound file, in mol2 format')
parser.add_argument('-p', '--pose',     type=str,  required=True, help='path to the candidate compound pose file, in mol2 format')
args = parser.parse_args()
cpd_path, pose_path = args.compound, args.pose

assert os.path.exists(cpd_path),  f'compound file -> {cpd_path} does not exist'
assert os.path.exists(pose_path), f'pose file -> {pose_path} does not exist'

gaff2_to_elem_dict = {
    "h2": "H", "h3": "H", "h4": "H", "h5": "H", "ha": "H", "hc": "H", "hn": "H", "ho": "H", "hp": "H", "hs": "H", "hw": "H", "hx": "H",
    "c" : "C", "cs": "C", "c1": "C", "c2": "C", "c3": "C", "ca": "C", "cp": "C", "cq": "C", "cc": "C", "cd": "C",
    "ce": "C", "cf": "C", "cg": "C", "ch": "C", "cx": "C", "cy": "C", "cu": "C", "cv": "C", "cz": "C", "h1": "H",
    "n" : "N", "n1": "N", "n2": "N", "n3": "N", "n4": "N", "na": "N", "nb": "N", "nc": "N", "nd": "N", "ne": "N",
    "nf": "N", "nh": "N", "no": "N", "ns": "N", "nt": "N", "nx": "N", "ny": "N", "nz": "N", "n+": "N", "nu": "N",
    "nv": "N", "n7": "N", "n8": "N", "n9": "N", "ni": "N", "nj": "N", "nk": "N", "nl": "N", "nm": "N", "nn": "N",
    "np": "N", "nq": "N", "n5": "N", "n6": "N",
    "o" : "O", "oh": "O", "os": "O", "op": "O", "oq": "O", "ow": "O",
    "p2": "P", "p3": "P", "p4": "P", "p5": "P", "pb": "P", "pc": "P", "pd": "P", "pe": "P", "pf": "P", "px": "P",
    "py": "P",
    "s" : "S", "s2": "S", "s4": "S", "s6": "S", "sh": "S", "ss": "S", "sp": "S", "sq": "S", "sx": "S", "sy": "S",
    "f" : "F",
    "cl": "CL",
    "br": "BR",
    "i" : "I",
    "Cu": "Cu"
}

def sybyl_to_elem(sybyl_type):
    if sybyl_type.find('.') == -1:
        return sybyl_type.upper()
    else:
        return sybyl_type.split('.')[0].upper()

def parse_mol2(in_mol2):
    with open(in_mol2) as f:
        all_mol2_lines = f.readlines()
    start_idx = 0
    for m_line in all_mol2_lines:
        if m_line[0:17] == '@<TRIPOS>MOLECULE':
            break
        start_idx += 1
    all_mol2_lines = all_mol2_lines[start_idx:]

    mol2_lines_list = []
    for line in all_mol2_lines:
        if line[0:17] == '@<TRIPOS>MOLECULE':
            mol2_lines_list.append([line])
            continue
        mol2_lines_list[-1].append(line)

    mol_dict_list = []
    for mol2_lines in mol2_lines_list:
        block_id = None
        mol_dict = {'atoms':[], 'mol2_types':[], 'coords':[], 'charges':[], 'resns':[]}
        molecule_lines = []
        atom_lines = []
        for line in mol2_lines:
            if line[0:17] == '@<TRIPOS>MOLECULE':
                block_id = '@<TRIPOS>MOLECULE'
                continue
            elif line[0:13] == '@<TRIPOS>ATOM':
                block_id = '@<TRIPOS>ATOM'
                continue
            elif line[0:9] == '@<TRIPOS>':
                block_id = 'Other'
                continue

            if block_id == '@<TRIPOS>MOLECULE':
                molecule_lines.append(line)
            if block_id == '@<TRIPOS>ATOM':
                if line.strip() != '':
                    atom_lines.append(line)

        #assert(len(molecule_lines) == 6)
        atom_num, bond_num = int(molecule_lines[1].split()[0]), int(molecule_lines[1].split()[1])
        assert(len(atom_lines) == (atom_num))

        for line in atom_lines:
            items = line.strip().split()
            atom_id = int(items[0])
            atom_name = items[1]
            x, y, z = float(items[2]), float(items[3]), float(items[4])
            mol2_type = items[5]
            resi = items[6]
            resn = items[7]
            charge = items[8]

            mol_dict['atoms'].append(atom_name)
            mol_dict['mol2_types'].append(mol2_type)
            mol_dict['coords'].append(np.array((x, y, z)))
            mol_dict['charges'].append(charge)
            # mol_dict['resis'].append(resi)
            mol_dict['resns'].append(resn)

        assert(len(mol_dict['atoms']) == atom_num)
        mol_dict_list.append(mol_dict)
    return mol_dict_list


if __name__ == '__main__':

    mismatch_flag = False

    cpd_mol_dict = parse_mol2(cpd_path)[0]
    pose_mol_dict_list = parse_mol2(pose_path)

    cpd_elem_list = []
    for gaff2_type in cpd_mol_dict['mol2_types']:
        cpd_elem = gaff2_to_elem_dict[gaff2_type]
        if cpd_elem != 'H':
            cpd_elem_list.append(cpd_elem)

    cpd_elem_str = '/'.join(cpd_elem_list)
    #print(f'compound element str: {cpd_elem_str}', flush=True)
    #print(f'-------------------------------------------------------------------------', flush=True)
    for pose_idx, pose_mol_dict in enumerate(pose_mol_dict_list):
        pose_elem_list = []
        for sybyl_type in pose_mol_dict['mol2_types']:
            pose_elem = sybyl_to_elem(sybyl_type)
            if pose_elem != 'H':
                pose_elem_list.append(pose_elem)
        pose_elem_str = '/'.join(pose_elem_list)
        if cpd_elem_str != pose_elem_str:
            print(f'pose {pose_idx+1} element order mismatches with compound:', flush=True)
            print(f'compound element str: {cpd_elem_str}', flush=True)
            print(f'    pose element str: {pose_elem_str}', flush=True)
            print(f'-------------------------------------------------------------------------', flush=True)
            mismatch_flag = True
    if not mismatch_flag:
        print('No mismatch found.', flush=True)

